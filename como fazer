üìå Estrutura do projeto

Teremos:
‚úÖ Frontend (HTML, CSS, JS) ‚Üí Criar√° o formul√°rio e enviar√° os dados para o backend.
‚úÖ Backend (Node.js + Express) ‚Üí Receber√° os dados e os salvar√° no PostgreSQL.
‚úÖ Banco de Dados (PostgreSQL) ‚Üí Armazenar√° os dados.


üöÄ Passo 1: Configurar o PostgreSQL no pgAdmin
1Ô∏è‚É£ Abra o pgAdmin
2Ô∏è‚É£ Crie um banco de dados chamado cadastro
3Ô∏è‚É£ Crie uma tabela users rodando este comando no Query Tool:

sql
Copiar
Editar
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    cpf VARCHAR(14) UNIQUE NOT NULL,
    birthdate DATE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL
);


üöÄ Passo 2: Criar o Backend com Node.js e Express
Agora, no VS Code, siga os passos abaixo:

1Ô∏è‚É£ Criar a pasta do projeto
Abra o terminal no VS Code (Ctrl + ' ) e rode:

sh
Copiar
mkdir meu-projeto && cd meu-projeto


2Ô∏è‚É£ Criar a pasta do backend
sh
Copiar
Editar
mkdir backend && cd backend


3Ô∏è‚É£ Inicializar o Node.js e instalar depend√™ncias
sh
Copiar
Editar
npm init -y
npm install express pg cors body-parser dotenv


4Ô∏è‚É£ Criar o arquivo server.js
No VS Code, dentro da pasta backend, crie um arquivo server.js e cole este c√≥digo:

javascript
Copiar
Editar
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { Pool } = require('pg');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const pool = new Pool({
  user: 'postgres',  // Altere para seu usu√°rio do PostgreSQL
  host: 'localhost',
  database: 'cadastro', // Nome do banco de dados
  password: 'sua_senha', // Altere para sua senha do PostgreSQL
  port: 5432
});

app.post('/users', async (req, res) => {
  const { name, cpf, birthdate, email } = req.body;
  try {
    const result = await pool.query(
      'INSERT INTO users (name, cpf, birthdate, email) VALUES ($1, $2, $3, $4) RETURNING *',
      [name, cpf, birthdate, email]
    );
    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.listen(3000, () => console.log('‚úÖ Servidor rodando na porta 3000'));


5Ô∏è‚É£ Criar um arquivo .env para armazenar credenciais
No backend, crie um arquivo .env e adicione:

ini
Copiar
Editar
DB_USER=postgres
DB_PASSWORD=sua_senha
DB_NAME=cadastro
DB_HOST=localhost
DB_PORT=5432


6Ô∏è‚É£ Rodar o backend
sh
Copiar
Editar
node server.js
Se estiver tudo certo, ver√°:

yaml
Copiar
Editar
‚úÖ Servidor rodando na porta 3000



üöÄ Passo 3: Criar o Frontend (HTML + JavaScript)
Agora, vamos criar o formul√°rio para enviar os dados para o backend.

1Ô∏è‚É£ Criar a pasta do frontend
sh
Copiar
Editar
cd ..
mkdir frontend && cd frontend


2Ô∏è‚É£ Criar o arquivo index.html
No VS Code, dentro da pasta frontend, crie index.html e cole:

html
Copiar
Editar
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastro</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        .container { max-width: 400px; margin: auto; }
        .form-group { margin-bottom: 10px; text-align: left; }
        label { display: block; }
        input { width: 100%; padding: 8px; }
        button { padding: 10px; background: green; color: white; border: none; cursor: pointer; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Cadastro</h1>
        <form id="userForm">
            <div class="form-group">
                <label for="name">Nome:</label>
                <input type="text" id="name" required>
            </div>
            <div class="form-group">
                <label for="cpf">CPF:</label>
                <input type="text" id="cpf" required>
            </div>
            <div class="form-group">
                <label for="birthdate">Data de Nascimento:</label>
                <input type="date" id="birthdate" required>
            </div>
            <div class="form-group">
                <label for="email">E-mail:</label>
                <input type="email" id="email" required>
            </div>
            <button type="submit">Cadastrar</button>
        </form>
        <p id="message"></p>
    </div>

    <script src="script.js"></script>
</body>
</html>

üî• O que esse CSS faz?
‚úÖ Design moderno: Fundo com gradiente azul, formul√°rio com sombra suave.
‚úÖ Inputs elegantes: Bordas arredondadas, efeito de foco com brilho azul.
‚úÖ Bot√£o estilizado: Cor azul vibrante e efeito de hover.
‚úÖ Anima√ß√£o suave: Formul√°rio aparece com efeito "fade-in".
‚úÖ Responsivo: Adapta bem a diferentes tamanhos de tela.


3Ô∏è‚É£ Criar o arquivo script.js
No VS Code, dentro da pasta frontend, crie script.js e cole:

javascript
Copiar
Editar
document.getElementById("userForm").addEventListener("submit", async function (event) {
    event.preventDefault();

    const userData = {
        name: document.getElementById("name").value,
        cpf: document.getElementById("cpf").value,
        birthdate: document.getElementById("birthdate").value,
        email: document.getElementById("email").value
    };

    try {
        const response = await fetch("http://localhost:3000/users", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData)
        });

        const result = await response.json();
        document.getElementById("message").textContent = "Cadastro realizado com sucesso!";
    } catch (error) {
        document.getElementById("message").textContent = "Erro ao cadastrar!";
    }
});


üöÄ Passo 4: Rodar Tudo!
Agora, execute os dois servi√ßos:

üîπ Iniciar o Backend
sh
Copiar
Editar
cd backend
node server.js


üîπ Iniciar o Frontend
1Ô∏è‚É£ crie outro terminal
Ctrl + j


2Ô∏è‚É£ Abra o index.html no navegador.

‚úÖ Teste o formul√°rio
Abra index.html no navegador
Preencha os dados
Clique em "Cadastrar"
Os dados ser√£o enviados para o PostgreSQL!
Se quiser verificar no banco, rode no pgAdmin:

sql
Copiar
Editar
SELECT * FROM users;



COMO CRIAR A TABELA NO pgAdmin

‚úÖ Passo 1: Abrir o pgAdmin

1Ô∏è‚É£ Abra o pgAdmin 4

No Windows, pressione Win + S, digite pgAdmin e abra o aplicativo.
No Linux, use o terminal e rode:
sh
Copiar
Editar
pgadmin4

2Ô∏è‚É£ Conecte-se ao servidor PostgreSQL

No painel esquerdo, clique duas vezes no "PostgreSQL 14" (ou sua vers√£o instalada).
Se pedir senha, digite a senha que voc√™ escolheu ao instalar o PostgreSQL.


‚úÖ Passo 2: Criar o Banco de Dados cadastro

1Ô∏è‚É£ No painel esquerdo, clique com o bot√£o direito em "Databases" ‚Üí "Create" ‚Üí "Database"

2Ô∏è‚É£ No campo "Database name", digite:

cadastro

3Ô∏è‚É£ Clique em "Save"

O banco de dados cadastro aparecer√° na lista.


‚úÖ Passo 3: Criar a Tabela users
Agora, vamos criar a tabela dentro do banco cadastro.

1Ô∏è‚É£ Clique duas vezes no banco de dados cadastro

2Ô∏è‚É£ No menu superior, clique em "Tools" ‚Üí "Query Tool"

3Ô∏è‚É£ No editor que abrir, cole este c√≥digo SQL:

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    cpf VARCHAR(14) UNIQUE NOT NULL,
    birthdate DATE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL
);

4Ô∏è‚É£ Clique no bot√£o "Execute" (√≠cone ‚ñ∂Ô∏è verde)

Isso criar√° a tabela users dentro do banco cadastro.


‚úÖ Passo 4: Verificar se a tabela foi criada

1Ô∏è‚É£ No painel esquerdo, clique em "cadastro" > "Schemas" > "public" > "Tables"

2Ô∏è‚É£ Voc√™ ver√° a tabela users.

3Ô∏è‚É£ Para visualizar os dados cadastrados, volte ao Query Tool e rode:

SELECT * FROM users;


COMO RODAR O BACKEND E O FRONTEND NO TERMINAL

‚úÖ Passo 1: Abrir o projeto no VS Code
1Ô∏è‚É£ Abra o VS Code

2Ô∏è‚É£ No terminal do VS Code (Ctrl + '), entre na pasta do projeto:
cd C:\GabrielDS2\meu-projeto

‚úÖ Passo 2: Iniciar o Backend (Servidor Node.js)
Agora, vamos rodar o servidor backend, que se conecta ao PostgreSQL.

1Ô∏è‚É£ No terminal, entre na pasta do backend:
cd backend

2Ô∏è‚É£ Rodar o servidor com:
node server.js

3Ô∏è‚É£ Se estiver tudo certo, ver√° esta mensagem:
‚úÖ Servidor rodando na porta 3000

4Ô∏è‚É£ Se der erro, verifique se o PostgreSQL est√° rodando corretamente.

Abrir um novo terminal no VS Code
1Ô∏è‚É£ No VS Code, clique em Terminal > Novo Terminal

2Ô∏è‚É£ Um novo terminal ser√° aberto abaixo.

3Ô∏è‚É£ Agora voc√™ pode rodar os comandos do frontend sem parar o backend!
üîπ No novo terminal, v√° para a pasta do frontend:
cd frontend

üîπ Abra o formul√°rio no navegador:
start index.html  # Windows
